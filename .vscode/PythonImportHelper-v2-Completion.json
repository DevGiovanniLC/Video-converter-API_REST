[
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "zmq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zmq",
        "description": "zmq",
        "detail": "zmq",
        "documentation": {}
    },
    {
        "label": "visible_device_list",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "visible_device_list = '0' # use , separator for more GPUs like '0, 1'\nper_process_gpu_memory_fraction = 0.9 # avoid out of memory\nintra_op_parallelism_threads = 2  # default in tensorflow\ninter_op_parallelism_threads = 5  # default in tensorflow\ngpu_options = tf.compat.v1.GPUOptions(\n              per_process_gpu_memory_fraction = per_process_gpu_memory_fraction,\n              visible_device_list = visible_device_list,\n              allow_growth = True)\nconfig = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "per_process_gpu_memory_fraction",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "per_process_gpu_memory_fraction = 0.9 # avoid out of memory\nintra_op_parallelism_threads = 2  # default in tensorflow\ninter_op_parallelism_threads = 5  # default in tensorflow\ngpu_options = tf.compat.v1.GPUOptions(\n              per_process_gpu_memory_fraction = per_process_gpu_memory_fraction,\n              visible_device_list = visible_device_list,\n              allow_growth = True)\nconfig = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,\n         log_device_placement = False,",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "intra_op_parallelism_threads",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "intra_op_parallelism_threads = 2  # default in tensorflow\ninter_op_parallelism_threads = 5  # default in tensorflow\ngpu_options = tf.compat.v1.GPUOptions(\n              per_process_gpu_memory_fraction = per_process_gpu_memory_fraction,\n              visible_device_list = visible_device_list,\n              allow_growth = True)\nconfig = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,\n         log_device_placement = False,\n         intra_op_parallelism_threads = intra_op_parallelism_threads,",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "inter_op_parallelism_threads",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "inter_op_parallelism_threads = 5  # default in tensorflow\ngpu_options = tf.compat.v1.GPUOptions(\n              per_process_gpu_memory_fraction = per_process_gpu_memory_fraction,\n              visible_device_list = visible_device_list,\n              allow_growth = True)\nconfig = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,\n         log_device_placement = False,\n         intra_op_parallelism_threads = intra_op_parallelism_threads,\n         inter_op_parallelism_threads = inter_op_parallelism_threads,",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "gpu_options",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "gpu_options = tf.compat.v1.GPUOptions(\n              per_process_gpu_memory_fraction = per_process_gpu_memory_fraction,\n              visible_device_list = visible_device_list,\n              allow_growth = True)\nconfig = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,\n         log_device_placement = False,\n         intra_op_parallelism_threads = intra_op_parallelism_threads,\n         inter_op_parallelism_threads = inter_op_parallelism_threads,\n         gpu_options = gpu_options)",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "config = tf.compat.v1.ConfigProto(\n         allow_soft_placement = True,\n         log_device_placement = False,\n         intra_op_parallelism_threads = intra_op_parallelism_threads,\n         inter_op_parallelism_threads = inter_op_parallelism_threads,\n         gpu_options = gpu_options)\ns = config.SerializeToString()\n# print(list(map(hex, s)))  # print by json if need\nprint('a serialized protobuf string for TF_SetConfig, note the byte order is in normal order.')\nb = ''.join(format(b,'02x') for b in s)",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "s = config.SerializeToString()\n# print(list(map(hex, s)))  # print by json if need\nprint('a serialized protobuf string for TF_SetConfig, note the byte order is in normal order.')\nb = ''.join(format(b,'02x') for b in s)\nprint('0x%s' % b) # print by hex format",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.python.tf_sess_config",
        "description": "ffmpeg-7.0.tools.python.tf_sess_config",
        "peekOfCode": "b = ''.join(format(b,'02x') for b in s)\nprint('0x%s' % b) # print by hex format",
        "detail": "ffmpeg-7.0.tools.python.tf_sess_config",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "kind": 6,
        "importPath": "ffmpeg-7.0.tools.normalize",
        "description": "ffmpeg-7.0.tools.normalize",
        "peekOfCode": "class Formatter(\n    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter\n):\n    pass\ndef normalize():\n    parser = argparse.ArgumentParser(description=HELP, formatter_class=Formatter)\n    parser.add_argument('--input', '-i', required=True, help='specify input file')\n    parser.add_argument('--output', '-o', required=True, help='specify output file')\n    parser.add_argument('--dry-run', '-n', help='simulate commands', action='store_true')\n    parser.add_argument('encode_arguments', nargs='*', help='specify encode options used for the actual encoding')",
        "detail": "ffmpeg-7.0.tools.normalize",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "ffmpeg-7.0.tools.normalize",
        "description": "ffmpeg-7.0.tools.normalize",
        "peekOfCode": "def normalize():\n    parser = argparse.ArgumentParser(description=HELP, formatter_class=Formatter)\n    parser.add_argument('--input', '-i', required=True, help='specify input file')\n    parser.add_argument('--output', '-o', required=True, help='specify output file')\n    parser.add_argument('--dry-run', '-n', help='simulate commands', action='store_true')\n    parser.add_argument('encode_arguments', nargs='*', help='specify encode options used for the actual encoding')\n    args = parser.parse_args()\n    analysis_cmd = [\n        'ffprobe', '-v', 'error', '-of', 'compact=p=0:nk=1',\n        '-show_entries', 'frame_tags=lavfi.r128.I', '-f', 'lavfi',",
        "detail": "ffmpeg-7.0.tools.normalize",
        "documentation": {}
    },
    {
        "label": "HELP",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.normalize",
        "description": "ffmpeg-7.0.tools.normalize",
        "peekOfCode": "HELP = '''\nNormalize audio input.\nThe command uses ffprobe to analyze an input file with the ebur128\nfilter, and finally run ffmpeg to normalize the input depending on the\ncomputed adjustment.\nffmpeg encoding arguments can be passed through the extra arguments\nafter options, for example as in:\nnormalize.py --input input.mp3 --output output.mp3 -- -loglevel debug -y\n'''\nlogging.basicConfig(format='normalize|%(levelname)s> %(message)s', level=logging.INFO)",
        "detail": "ffmpeg-7.0.tools.normalize",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.normalize",
        "description": "ffmpeg-7.0.tools.normalize",
        "peekOfCode": "log = logging.getLogger()\nclass Formatter(\n    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter\n):\n    pass\ndef normalize():\n    parser = argparse.ArgumentParser(description=HELP, formatter_class=Formatter)\n    parser.add_argument('--input', '-i', required=True, help='specify input file')\n    parser.add_argument('--output', '-o', required=True, help='specify output file')\n    parser.add_argument('--dry-run', '-n', help='simulate commands', action='store_true')",
        "detail": "ffmpeg-7.0.tools.normalize",
        "documentation": {}
    },
    {
        "label": "LavfiCmd",
        "kind": 6,
        "importPath": "ffmpeg-7.0.tools.zmqshell",
        "description": "ffmpeg-7.0.tools.zmqshell",
        "peekOfCode": "class LavfiCmd(cmd.Cmd):\n    prompt = 'lavfi> '\n    def __init__(self, bind_address):\n        context = zmq.Context()\n        self.requester = context.socket(zmq.REQ)\n        self.requester.connect(bind_address)\n        cmd.Cmd.__init__(self)\n    def onecmd(self, cmd):\n        if cmd == 'EOF':\n            sys.exit(0)",
        "detail": "ffmpeg-7.0.tools.zmqshell",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "kind": 6,
        "importPath": "ffmpeg-7.0.tools.zmqshell",
        "description": "ffmpeg-7.0.tools.zmqshell",
        "peekOfCode": "class Formatter(\n    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter\n):\n    pass\ndef main():\n    parser = argparse.ArgumentParser(description=HELP, formatter_class=Formatter)\n    parser.add_argument('--bind-address', '-b', default='tcp://localhost:5555', help='specify bind address used to communicate with ZMQ')\n    args = parser.parse_args()\n    try:\n        LavfiCmd(args.bind_address).cmdloop('FFmpeg libavfilter interactive shell')",
        "detail": "ffmpeg-7.0.tools.zmqshell",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ffmpeg-7.0.tools.zmqshell",
        "description": "ffmpeg-7.0.tools.zmqshell",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=HELP, formatter_class=Formatter)\n    parser.add_argument('--bind-address', '-b', default='tcp://localhost:5555', help='specify bind address used to communicate with ZMQ')\n    args = parser.parse_args()\n    try:\n        LavfiCmd(args.bind_address).cmdloop('FFmpeg libavfilter interactive shell')\n    except KeyboardInterrupt:\n        pass\nif __name__ == '__main__':\n    main()",
        "detail": "ffmpeg-7.0.tools.zmqshell",
        "documentation": {}
    },
    {
        "label": "HELP",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.zmqshell",
        "description": "ffmpeg-7.0.tools.zmqshell",
        "peekOfCode": "HELP = '''\nProvide a shell used to send interactive commands to a zmq filter.\nThe command assumes there is a running zmq or azmq filter acting as a\nZMQ server.\nYou can send a command to it, follwing the syntax:\nTARGET COMMAND [COMMAND_ARGS]\n* TARGET is the target filter identifier to send the command to\n* COMMAND is the name of the command sent to the filter\n* COMMAND_ARGS is the optional specification of command arguments\nSee the zmq/azmq filters documentation for more details, and the",
        "detail": "ffmpeg-7.0.tools.zmqshell",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "ffmpeg-7.0.tools.zmqshell",
        "description": "ffmpeg-7.0.tools.zmqshell",
        "peekOfCode": "log = logging.getLogger()\nclass LavfiCmd(cmd.Cmd):\n    prompt = 'lavfi> '\n    def __init__(self, bind_address):\n        context = zmq.Context()\n        self.requester = context.socket(zmq.REQ)\n        self.requester.connect(bind_address)\n        cmd.Cmd.__init__(self)\n    def onecmd(self, cmd):\n        if cmd == 'EOF':",
        "detail": "ffmpeg-7.0.tools.zmqshell",
        "documentation": {}
    }
]